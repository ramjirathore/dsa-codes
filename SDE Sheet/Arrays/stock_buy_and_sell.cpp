// Problem - 

// Say you have an array for which the ith element is the price of a given stock on day i.

// If you were only permitted to complete at most one transaction 
//(i.e., buy one and sell one share of the stock), design an algorithm to find the maximum profit.
// Note that you cannot sell a stock before you buy one.

// Link - https://leetcode.com/problems/best-time-to-buy-and-sell-stock/
// Solution - https://www.youtube.com/watch?v=eMSfBgbiEjk&list=PLgUwDviBIf0rPG3Ictpu74YWBQ1CaBkm2&index=11


// BRUTE FORCE - O(n*n) time and O(1) space
// Traverse for each value (from that day till end) and find profit generated by it
// update maxProfit after each iteration 



// OPTIMAL - O(n) time and O(1) space
// maintain and update current min cost and current max profit
// return max profit at the end

class Solution {
public:
    int maxProfit(vector<int>& prices) {
       int profit = 0;
        int cost = INT_MAX;
        
        for(int i=0; i<prices.size(); i++) {
            cost = min(cost, prices[i]);
            profit = max(profit, prices[i] - cost);
        }
        
        return profit;
    }
};